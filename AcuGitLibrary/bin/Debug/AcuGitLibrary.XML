<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AcuGitLibrary</name>
    </assembly>
    <members>
        <member name="T:AcuGitLibrary.RepoMaker">
            <summary>
            <c>RepoMaker</c> is a class that can be used to quickly make git repositories
            </summary>
        </member>
        <member name="F:AcuGitLibrary.RepoMaker.root">
            <summary>
            The rootpath is the top directory path that will become a repository, or where repositories will be made
            </summary>
        </member>
        <member name="F:AcuGitLibrary.RepoMaker.includeSubs">
            <summary>
            Include the subdirectories of the folders within the rootpath
            </summary>
        </member>
        <member name="F:AcuGitLibrary.RepoMaker.singleDirectory">
            <summary>
            Make the rootpath directory into a repository as well
            </summary>
        </member>
        <member name="F:AcuGitLibrary.RepoMaker.overwrite">
            <summary>
            Dictates whether or not the RepoMaker will erase older .git folders (Important Note: If this is false I don't believe the program will function correctly)
            </summary>
        </member>
        <member name="F:AcuGitLibrary.RepoMaker.setDefaultIgnore">
            <summary>
            Determines whether or not the program will create the default .gitignore file that will ignore (.db, .pdf, .doc, .docx, .xls, .xlsx, .tmp) file types
            </summary>
        </member>
        <member name="M:AcuGitLibrary.RepoMaker.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Simplest constructor of the RepoMaker
            </summary>
            <param name="_rootpath"> The rootpath is the top directory path that will become a repository, or where repositories will be made</param>
            <param name="_override">Erases any pre-existing .git folders</param>
            <param name="_setDefaultIgnore">Creates a .gitignore that ignores (.db, .pdf, .doc, .docx, .xls, .xlsx, .tmp) file types </param>
        </member>
        <member name="M:AcuGitLibrary.RepoMaker.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Second constructor
            </summary>
            <param name="_rootpath">The rootpath is the top directory path that will become a repository, or where repositories will be made</param>
            <param name="_includeSubs">Include the subdirectories of the folders within the rootpath</param>
            <param name="_override">Erases any pre-existing .git folders</param>
             <param name="_setDefaultIgnore">Creates a .gitignore that ignores (.db, .pdf, .doc, .docx, .xls, .xlsx, .tmp) file types </param>
        </member>
        <member name="M:AcuGitLibrary.RepoMaker.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Third constructor
            </summary>
            <param name="_rootpath">The rootpath is the top directory path that will become a repository, or where repositories will be made</param>
            <param name="_includeSubs">Include the subdirectories of the folders within the rootpath</param>
            <param name="_singleDirectory">Make the rootpath directory into a repository as well</param>
            <param name="_override">Erases any pre-existing .git folders</param>
             <param name="_setDefaultIgnore">Creates a .gitignore that ignores (.db, .pdf, .doc, .docx, .xls, .xlsx, .tmp) file types </param>
        </member>
        <member name="M:AcuGitLibrary.RepoMaker.Run">
            <summary>
            <c>Run()</c> is the method in the <c>RepoMaker</c> Class <para>that will begin creating the repositories in accordance with the parameters that have been entered</para>
            </summary>
        </member>
        <member name="M:AcuGitLibrary.RepoMaker.UberDel(System.String)">
            <summary>
            Most assured way to delete .git directories
            For whatever reason the basic Directory.Delete() didn't work
            This method is more thorough
            </summary>
            <param name="_path"> The path to the directory that you wish to delete</param>
        </member>
        <member name="T:AcuGitLibrary.ChangeRequest">
            <summary>
            Used to submit new files, or change requests, to a master repository 
            </summary>
        </member>
        <member name="T:AcuGitLibrary.ChangeRequest.RequestType">
            <summary>
            Indicates the method by which the user wants to submit the job
            </summary>
        </member>
        <member name="F:AcuGitLibrary.ChangeRequest.RequestType.Job_Based">
            <summary>
            Job based submissions will utilize the job number and path to the master's root i.e. U:\CNC Files ...
            </summary>
        </member>
        <member name="F:AcuGitLibrary.ChangeRequest.RequestType.Precise">
            <summary>
            Requires the user to enter the exact path of the master repository and the temp file's pathway as well
            </summary>
        </member>
        <member name="M:AcuGitLibrary.ChangeRequest.#ctor(System.String,System.String,AcuGitLibrary.ChangeRequest.RequestType,System.Boolean,System.String)">
             <summary>
            Request Constructor: 
             <para>By default the program will ... </para>
             <para>  ... Not delete the submitted files</para>
             <para>  ... Run RequestType.Precise</para>
             <para>  ... Run SubmissionType.Single</para>
             <para> !! IMPORTANT !!:</para>
             <para>  The JobBased submission will not work unless the masterRoot is set to a value other than <c>null</c></para>
             </summary>
             <param name="_subPath"><c>string</c>: The path to either ...<para><c>SubmissionType.Single</c>: The file that is being submitted</para><para><c>SubmissionType.Multi</c>: The folder that contains the files being submitted</para></param>
             <param name="_repoPath"><c>string</c>: The path to either ...<para><c>RequestType.Precise</c>: The path to the folder that contains the file</para><para><c>RequestType.JobBased</c>: The root folder that contains the jobs folders</para></param>
             <param name="_jobNumb">The job number for the submission<para>  Required for JobBased submission</para></param>
             <param name="_reqType"><c>RequestType</c>: set to <c>RequestType.Precise</c> by default</param>
             <param name="_deleteSub"></param>
        </member>
        <member name="M:AcuGitLibrary.ChangeRequest.Submit">
            <summary>
            Used to run the change request in accordance with the parameters that were entered in the constructor
            </summary>
        </member>
        <member name="M:AcuGitLibrary.ChangeRequest.Hide(System.String,System.Boolean)">
            <summary>
            Hides or unhides a given file, or folder
            </summary>
            <param name="_path">The pathway to the file, or folder</param>
            <param name="_hide"><c>Boolean</c>:Set to <c>true</c> to hide, and set to <c>false</c> to unhide.<para>Set to <c>true</c> by default</para></param>
        </member>
        <member name="T:AcuGitLibrary.Email">
            <summary>
            Used to send emails from within Acutec's PA and SC facilities
            </summary>
        </member>
        <member name="T:AcuGitLibrary.Email.Smtp">
            <summary>
            Indicates the source email address that will send the email notification
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Email.Smtp.AcutecPA">
            <summary>
            Acutec's noreply email set up for PA, administrator access will need to be used inorder to use this I believe
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Email.Smtp.AcutecSC">
            <summary>
            Acutec's llcit@acutecind.com address set up for use in Acutec's South Carolina location
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Email.#ctor(AcuGitLibrary.Email.Smtp,System.String[])">
            <summary>
            Simplest constructor of the Email Class
            </summary>
            <param name="_SmtpServer">Indicate whether you would like to use Acutec's PA, or SC email for notification</param>
            <param name="_Recievers"><c>string[]</c>:An array of the email addresses you would like to send the notification to</param>
        </member>
        <member name="M:AcuGitLibrary.Email.#ctor(AcuGitLibrary.Email.Smtp,System.String[],System.String,System.String)">
            <summary>
            Constructor where one can set up a custom subject and body
            </summary>
            <param name="_SmtpServer">Indicate whether you would like to use Acutec's PA, or SC email for notification</param>
            <param name="_Recievers"><c>string[]</c>:An array of the email addresses you would like to send the notification to</param>
            <param name="_Subject">The subject of the email</param>
            <param name="_Body">The body of the email</param>
        </member>
        <member name="M:AcuGitLibrary.Email.#ctor(AcuGitLibrary.Email.Smtp,System.String)">
            <summary>
            Simplest constructor that takes the path to a .csv file for the mailing list
            </summary>
            <param name="_SmtpServer">Indicate whether you would like to use Acutec's PA, or SC email for notification</param>
            <param name="_MailingList">The path to a .csv file holds all of the addresses that you would like to send the notification</param>
        </member>
        <member name="M:AcuGitLibrary.Email.#ctor(AcuGitLibrary.Email.Smtp,System.String,System.String,System.String)">
            <summary>
            Allows the user to add custom Subject and body, as well as, using a .csv file as a mailing list
            </summary>
            <param name="_SmtpServer">Indicate whether you would like to use Acutec's PA, or SC email for notification</param>
            <param name="_MailingList">The path to a .csv file holds all of the addresses that you would like to send the notification</param>
            <param name="_Subject">The subject of the email</param>
            <param name="_Body">The body of the email</param>
        </member>
        <member name="M:AcuGitLibrary.Email.Send">
            <summary>
            Sends out the email you have constructed
            </summary>
        </member>
        <member name="T:AcuGitLibrary.Git">
            <summary>
            Class built for user friendly interaction between C# and Git
            </summary>
        </member>
        <member name="T:AcuGitLibrary.Git.ResetMode">
            <summary>
            Indicates the sort of action that will be taken with the Git.Reset command
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Git.ResetMode.Soft">
            <summary>
            A Soft reset will simply reverse the working directory to the indicated commit leaving any staged or changed files alone 
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Git.ResetMode.Mixed">
            <summary>
            A Mixed reset (Note: Set to the default of Git.Reset()) will reverse the working directory to the indicated commit while also removing all files from staging 
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Git.ResetMode.Hard">
            <summary>
            A Hard reset will not only reverse the working directory to the indicated commit it will also undo any possible changes to any files within the repository
            </summary>
        </member>
        <member name="F:AcuGitLibrary.Git.Commitlist">
            <summary>
            The list of commit info for this repository
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.#ctor(System.String)">
            <summary>
            Constructor of the Git class, takes 1 parameter
            </summary>
            <param name="_repoPath">The pathway to repository you would like to access, or create</param>
        </member>
        <member name="M:AcuGitLibrary.Git.Stage(System.String)">
            <summary>
            Stage files to be commited to the repository
            </summary>
            <param name="_fileName">The name of the file that you would like to stage<para>Set to stage all files by default</para></param>
        </member>
        <member name="M:AcuGitLibrary.Git.Reset(AcuGitLibrary.Git.ResetMode,System.Int32)">
            <summary>
            Unstages files that were to be commited, or can be used to both unstage files
            Running this command with the default values will act as an "Unstage -all" command
            </summary>
            <param name="_ResetMode">Indicates the <c>ResetMode</c> that the user would like to use <para><see cref="T:AcuGitLibrary.Git.ResetMode"/></para></param>
            <param name="_stepBack">The number of commits the user would like to step back<para>    Set to 0 by default, indicates a reset back to the top commit of that branch</para></param>
        </member>
        <member name="M:AcuGitLibrary.Git.Commit(System.String,System.String,System.String)">
            <summary>
            Commit the files/changes that have been staged
            </summary>
            <param name="_message">The commit message, or information</param>
            <param name="_username">The username, or identity of the party that is submitting the commit<para>Set to <c>"(Automated)"</c> by default</para></param>
            <param name="_email_Address">The email address of the user that that is making the commit<para>Set to <c>"--"</c> by default</para></param>
        </member>
        <member name="M:AcuGitLibrary.Git.Commit">
            <summary>
            Quick commit (Note: Use this method only for very simple/minor commits)
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.Init">
            <summary>
            Creates a repository in path of the Git object
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.Branch(System.String)">
            <summary>
            Creates a new branch in the repository of the Git objects repository <para>***Important*** There needs to be a repository in this directory in order for branching to be possible</para>
            </summary>
            <param name="branchName">The name that you would like to name the branch</param>
        </member>
        <member name="M:AcuGitLibrary.Git.Checkout(System.String)">
            <summary>
            Checks-out a specific branch within this Git objects repository<para>***Important*** commits, additions, and stages, will only be added in the branch that is checked out</para>
            <para>The Master repository of repositories made with this tool will always be named "master"</para>
            </summary>
            <param name="branchName">The name of the branch that you would like to be checked out</param>
        </member>
        <member name="M:AcuGitLibrary.Git.SetPath(System.String)">
            <summary>
            Set or reset the path of the Git object, i.e. change the working directory of this object
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:AcuGitLibrary.Git.GetPath">
            <summary>
            Return the path of this objects working repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:AcuGitLibrary.Git.CreateIgnore">
            <summary>
            This method will create the initial .gitignore file and add any ignore parameters as well if there are any
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.AddIgnore(System.String[])">
            <summary>
            Adds new ignoreable arguments to the .gitignore file in this repository, or Creates the .gitignore file if it does not exist already
            </summary>
            <param name="ignoreables"><c>string[]</c>: Array of arguments/parameters the user would like to add to the .gitignore file</param>
        </member>
        <member name="M:AcuGitLibrary.Git.AddIgnore(System.String)">
            <summary>
            Adds new ignoreable argument to the .gitignore file in this repository, or Creates the .gitignore file if it does not exist already
            </summary>
            <param name="ignoreable"><c>string</c>: the argument you would like to add to the .gitignore file</param>
        </member>
        <member name="M:AcuGitLibrary.Git.ResetIgnore">
            <summary>
            Erases all existing parameters/arguments in the .gitignore file
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.GetIgnore">
            <summary>
            A method for returning the arguments/lines in the .gitignore file if it exists
            </summary>
            <returns>returns a list delimited by commas of all the extension types and arguments that the repository will ignore</returns>
        </member>
        <member name="M:AcuGitLibrary.Git.Ignored(System.String)">
            <summary>
            Parses the .gitignored file to check if the given argument is being ignored
            </summary>
            <param name="arg">The ignore argument that is being checked for</param>
            <returns><c>bool</c>:<c>true</c> if the argument is being ignored already <c>false</c> if the argument is not being ignored, or .gitignore does not exist</returns>
        </member>
        <member name="M:AcuGitLibrary.Git.Remove(System.String)">
            <summary>
            Deletes the given file, as well as, commiting the removal to git
            </summary>
            <param name="_filename"> The filename or path to the file that you would like to remove</param>
        </member>
        <member name="M:AcuGitLibrary.Git.Untrack(System.String)">
            <summary>
            Removes the given file from being tracked by Git
            </summary>
            <param name="_filename"> The file or the path to the file you would like to stop tracking</param>
        </member>
        <member name="M:AcuGitLibrary.Git.CommitList">
            <summary>
            This command will build, or rebuild, the list of commits for this repository
            </summary>
        </member>
        <member name="M:AcuGitLibrary.Git.CommitPick(AcuGitLibrary.CommitInfo)">
            <summary>
            Cherry Pick a commit based off of the CommitInfo class, this would make it easier to work with the CommitList method and the <c>List Commits</c> object
            </summary>
            <param name="info">The commit info that you wish to pass <see cref="T:AcuGitLibrary.CommitInfo"/></param>
        </member>
        <member name="M:AcuGitLibrary.Git.Exists">
            <summary>
            Checks if the path that you are accessing is a Git Repository
            </summary>
            <returns><c>bool</c></returns>
        </member>
        <member name="T:AcuGitLibrary.CommitInfo">
            <summary>
            Stores non-LibGit2 library info for referencing a Commit
            </summary>
        </member>
        <member name="F:AcuGitLibrary.CommitInfo.BranchName">
            <summary>
            The Branch the commit is in
            </summary>
        </member>
        <member name="F:AcuGitLibrary.CommitInfo.CommitShortMessage">
            <summary>
            The Shortened message of the commit (typically the first line)
            </summary>
        </member>
        <member name="F:AcuGitLibrary.CommitInfo.ID">
            <summary>
            The Commit ID of the commit
            </summary>
        </member>
        <member name="M:AcuGitLibrary.CommitInfo.#ctor(System.String,LibGit2Sharp.Commit)">
            <summary>
            Constructor of the CommitInfo class
            </summary>
            <param name="branchName">The Branch the commit is in</param>
            <param name="commit">The LibGit2 Commit object that this info is based around</param>
        </member>
    </members>
</doc>
